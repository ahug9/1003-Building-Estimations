// The CameraVideoPageController is a class that controls the camera 
// video page.  This class provides a some useful methods you will
// need to call:
//     cameraVideoPage.displayMessage(message, timeout):
//         Causes a short message string to be displayed on the
//         page for a brief period.  Useful for showing quick
//         notifications to the user.  message is a plain string.
//         timeout is option and denotes the length of time in msec
//         to show the message for.
//     cameraVideoPage.setHeadsUpDisplayHTML(html):
//         This will set or update the heads-up-display with the
//         text given in the html argument.  Usually this should 
//         just be a string with text and line breaks (<br />).

// Initialise the camera video page and callback to our 
// cameraVideoPageInitialised() function when ready.
var cameraVideoPage = new CameraVideoPageController(
        cameraVideoPageInitialised);

// You may need to create variables to store state.
window.addEventListener("deviceorientation", handleOrientation, true);

function handleOrientation(event)
{
   var beta = event.beta;
}


// This function will be called when the camera video page
// is intialised and ready to be used.
function cameraVideoPageInitialised()
{
    cameraVideoPage.setHeadsUpDisplayHTML("Angle: " + handleOrientation("deviceorientation"));
    // Step 1: Check for and intialise deviceMotion
}

function displayElementsWithClass(className, display)
    {
        var elements = document.getElementsByClassName(className);
        
        for (var i = 0; i < elements.length; i++)
        {
            if (display)
            {
                elements[i].style.display = "block";
            }
            else
            {
                elements[i].style.display = "none";
            }
        }
    }

function deviceOrientationUpdate(event)
    {
        if(event.beta==null)
        {
            displayElementsWithClass("compassValue", false);
            displayElementsWithClass("webkitCompassValue", false);
            displayElementsWithClass("compassError", true);
            return;
        }
        displayElementsWithClass("compassValue", true);
        displayElementsWithClass("compassError", false);

        if (event.absolute)
        {
            var heading = compassHeading(event.beta);
            document.getElementById("headingValue").innerHTML = Number(heading).toFixed(2);
        }
        else
        {
            document.getElementById("headingValue").innerHTML = "???";
        }
        
        document.getElementById("betaValue").innerHTML = Number(event.beta).toFixed(2);
        
        if (event.webkitCompassHeading != undefined)
        {
            displayElementsWithClass("webkitCompassValue", true);
            document.getElementById("webkitHeadingValue").innerHTML = Number(event.webkitCompassHeading).toFixed(2);
            document.getElementById("webkitAccuracyValue").innerHTML = Number(event.webkitCompassAccuracy).toFixed(2);
        }
        else
        {
            displayElementsWithClass("webkitCompassValue", false);
        }
    }

    if (window.DeviceOrientationEvent) 
    {
        displayElementsWithClass("compassError", false);
        window.addEventListener('deviceorientation', deviceOrientationUpdate);
    }
    else
    {
        displayElementsWithClass("compassValue", false);
    }

deviceOrientationUpdate(event);

cameraVideoPageInitialised();    


// This function is called by a button to set the height of phone from the
// ground, in metres.
function setCameraHeightValue()
{
    // Step 3: Set camera height
    // check if input is a number and is positive
    // display on screen using the displayMessage method
}
    
// This function is called by a button to set the angle to the base of
// the object being measured.  It uses the current smoothed tilt angle.
function setBaseTiltAngle()
{
    // Step 4: Record tilt angle 
    // display on screen using the displayMessage method
}

// This function is called by a button to set the angle to the apex of
// the object being measured.  It uses the current smoothed tilt angle.
function setApexTiltAngle()
{
    // Step 4: Record tilt angle 
    // display on screen using the displayMessage method
}

// You may need to write several other functions.
